选择优化的数据类型
简单的原则：
1，更小通常更好

一般来说，要试着使用能正确地存储和表示数据的最小类型。更小的数据类型通常更快，因为它们使用了
更少的磁盘空间、内存和CPU缓存，而且需要的CPU周期也更少。
但是要确保不会低估需要保存的值，在架构中的多个地方增加数据类型的范围是一件极其费时费力的工
作。如果不确定需要什么数据类型，就选择你认为不会超出范围的最小类型。（如果系统不是非常繁忙或
不会保存太多的数据，再或者还处于设计的早期，就可以在以后轻易地更改它。）

2，简单就好
越简单的数据类型，需要CPU周期就越少

3，尽量避免NULL
要尽可能地把字段（Field）定义为NOT NULL。即使应用程序无须保存NULL（没有值），也有许多表包含
了可空列（Nullable Column)，这仅仅是因为它为默认选项。除非真的要保存NULL，否则就把列定义为NOT
NULL。
MySQL难以优化引用了可空列的查询，它会使索引、索引统计和值更加复杂。可空列需要更多的存储空
间，还需要在MySQL内部进行特殊处理。当可空列被索引的时候，每条记录都需要一个额外的字节，还
能导致MylSAM中固定大小的索引（例如一个整数列上的索引）变成可变大小的索引。
即使要在表中存储“没有值”的字段，还是有可能不使用NULL的。考虑使用0、特殊值或空字符串来代
替它。
把NULL列改为NOT NULL带来的性能提升很小，所以除非确定它引入了问题，否则就不要把它当成优先
的优化措施。然后，如果计划对列进行索引，就要尽量避免把它设置为可空。





和TEXT唯一的区别就是BLOB保存的是二进制数据，没有字符集和排序规则，但是TEXT有字符集和排序


MySQL不能索引TEXT和BLOB类型的完整长度，也不能为排序使用索引。


最好的办法是尽可能地避免使用BLOB和TEXT类型。如果不能避免，就可以使用ORDER BY
SUBSTRING(column，length）把这些值转换为字符串，让它们使用内存中的临时表。要保证使用的子字符串
足够扳，不要让临时表变得过大，以致超过max_heap_size或tmp_table_size的大小，否则MySQL会把
表转换为磁盘上的MyISAM表。
如果在解释器（EXPLAIN）中的Extra列显示“使用临时表（Using Temporary)"，就说明使用了隐式临时表。
